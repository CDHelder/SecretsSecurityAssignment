// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecretsSecurityAssignment.Data;

namespace SecretsSecurityAssignment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210903120908_AddNameToSecret")]
    partial class AddNameToSecret
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SecretsSecurityAssignment.Core.SensitiveSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SensitiveSecrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "SensitiveSecret 1",
                            Name = "Roddel 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "SensitiveSecret 2",
                            Name = "Roddel 2"
                        });
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.StateSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StateSecrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "StateSecret 1",
                            Name = "Staatsgeheim 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "StateSecret 2",
                            Name = "Staatsgeheim 2"
                        });
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.TopSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TopSecrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "TopSecret 1",
                            Name = "Topgeheim 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "TopSecret 2",
                            Name = "Topgeheim 2"
                        });
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.UserEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.SensitiveSecret", b =>
                {
                    b.HasOne("SecretsSecurityAssignment.Core.UserEntities.User", "User")
                        .WithMany("SensitiveSecrets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.StateSecret", b =>
                {
                    b.HasOne("SecretsSecurityAssignment.Core.UserEntities.User", "User")
                        .WithMany("StateSecrets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.TopSecret", b =>
                {
                    b.HasOne("SecretsSecurityAssignment.Core.UserEntities.User", "User")
                        .WithMany("TopSecrets")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecretsSecurityAssignment.Core.UserEntities.User", b =>
                {
                    b.Navigation("SensitiveSecrets");

                    b.Navigation("StateSecrets");

                    b.Navigation("TopSecrets");
                });
#pragma warning restore 612, 618
        }
    }
}
